package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.List;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;

import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import shapes.Drawable;

public class PowerPaintDrawingPanel extends JPanel {

    private List<Drawable> myThingsToDraw;
    
    private Drawable myCurrentObject;
    
    private Color myCurrentColor;
    
    private int myCurrentThickness;
    
    /**
     * Generated.
     */
    private static final long serialVersionUID = -7113945567842866560L;
    
    public PowerPaintDrawingPanel() {
        super();
        myThingsToDraw = new ArrayList<Drawable>();
        final PaintListener paintListener = new PaintListener();
        // We have to add the paint listener as both a mouse listener and 
        // a mouse motion listener to work properly
        this.addMouseListener(paintListener);
        this.addMouseMotionListener(paintListener);
        myCurrentColor = Color.BLACK;
        myCurrentThickness = 1;
    }
    
    /**
     * Sets the thickness to use when drawing.
     * @param theThickness The new thickness (in pixels)
     */
    public void setThickness(final int theThickness) {
        myCurrentThickness = theThickness;
    }
    
    /**
     * Sets the color to use when drawing.
     * @param theColor The new color.
     */
    public void setColor(final Color theColor) {
        myCurrentColor = theColor;
    }
    
    protected void paintComponent(final Graphics theGraphics) {
        //MAKE SURE you call the parent paintComponenet
        super.paintComponent(theGraphics);
        
        //cast Graphics object to the "newer-ish" Graphics2D class.
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        // for better graphics display
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);

        //Starting Painting things!
        if (myCurrentObject != null) {
            myCurrentObject.drawSelf(g2d);
        }
        
        for (final Drawable drawableObject : myThingsToDraw) {
            drawableObject.drawSelf(g2d);
        }
        
    }
    
    private class PaintListener extends MouseInputAdapter {
        
        /* (non-Javadoc)
         * @see java.awt.event.MouseAdapter#mousePressed(java.awt.event.MouseEvent)
         */
        public void mousePressed(final MouseEvent theMouseEvent) {
            myCurrentObject = new shapes.Line(theMouseEvent.getX(), theMouseEvent.getY(),
                                              myCurrentColor, myCurrentThickness);
        }
        
        /* (non-Javadoc)
         * @see java.awt.event.MouseAdapter#mouseDragged(java.awt.event.MouseEvent)
         */
        public void mouseDragged(final MouseEvent theMouseEvent) {
            myCurrentObject.update(theMouseEvent.getX(), theMouseEvent.getY());
            repaint();
        }
        
        /* (non-Javadoc)
         * @see java.awt.event.MouseAdapter#mouseReleased(java.awt.event.MouseEvent)
         */
        public void mouseReleased(final MouseEvent theMouseEvent) {
            myCurrentObject.update(theMouseEvent.getX(), theMouseEvent.getY());
            myThingsToDraw.add(myCurrentObject);
            myCurrentObject = nullDrawable();
            repaint();
            
        }
        
        /**
         * Returns a null Drawable to represent a clear state.
         * @return Always null.
         */
        private Drawable nullDrawable() {
            return null;
        }
    }
        
}
