/*
 * Assignment 5
 * TCSS 305 - Programming Practicum 
 */

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import shapes.DrawableShape;

/**
 * A PowerPaintDrawingPanel class.
 * @author Sophie Nop
 * @version 11 November 2015
 *
 */
public class PowerPaintDrawingPanel extends JPanel {
    
    /**
     * Generated.
     */
    private static final long serialVersionUID = -7113945567842866560L;

    /**
     * The grid spacing. 
     */
    private static final int GRID_SPACING = 10;
    
    private static final int GRID_STROKE_WIDTH = 1;
    
    /**
     * The color of the grid.
     */
    private static final Color GRID_COLOR = Color.GRAY;
    /**
     * A list to hold things to draw. 
     */
    private final List<DrawableShape> myThingsToDraw;
    
    /**
     * An instance of DrawableShape interface that the user is currently working on. 
     */
    private DrawableShape myCurrentObject;
    
    /**
     * The color to use to draw. 
     */
    private Color myCurrentColor;
    
    /**
     * The thickness of my lines. 
     */
    private int myCurrentThickness;
    
    /**
     * Whether the grid is shown. 
     */
    private boolean myGridEnabled;
    
   
    /**
     * Constructor.
     */
    public PowerPaintDrawingPanel() {
        super();
        myThingsToDraw = new ArrayList<DrawableShape>();
        final PaintListener paintListener = new PaintListener();
        // We have to add the paint listener both a mouse listener and 
        // a mouse motion listener to work properly
        this.addMouseListener(paintListener); //mousePressed and MouseReleased
        this.addMouseMotionListener(paintListener); //mouseDrag
        myCurrentColor = Color.BLACK;
        myCurrentThickness = 1;
    }
    
    /**
     * Sets the thickness to use when drawing.
     * @param theThickness The new thickness (in pixels)
     */
    public void setThickness(final int theThickness) {
        myCurrentThickness = theThickness;
    }
    
    /**
     * Sets the line color to use when drawing.
     * @param theColor The new color.
     */
    public void setColor(final Color theColor) {
        //Color object get the new color that is chosen. 
        myCurrentColor = theColor;
    }
    
    public void setGridEnabled(boolean theGridEnabled) {
        myGridEnabled = theGridEnabled;
        repaint();
        
    }
    
    /**
     * drawGrid draws horizontal and vertical lines. 
     * @param theGraphics the grapics for the grid. 
     */
    private void drawGrid(final Graphics2D theGraphics) {
        theGraphics.setStroke(new BasicStroke(GRID_STROKE_WIDTH));
        theGraphics.setColor(GRID_COLOR);
        
     for (int i = 0; i < this.getHeight(); i += GRID_SPACING) {
            theGraphics.drawLine(0, i, this.getWidth(), i);
        }
        
        for(int j = 0; j < this.getWidth(); j += GRID_SPACING) {
            theGraphics.drawLine(j, 0, j, this.getHeight());
        }
        
    }
    
    /**
     * Drawing things. 
     * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
     */
    protected void paintComponent(final Graphics theGraphics) {
        //MAKE SURE you call the parent paintComponenet
        super.paintComponent(theGraphics);
        
        //cast Graphics object to the "newer-ish" Graphics2D class.
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        // for better graphics display
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);

        for (final DrawableShape drawableObject : myThingsToDraw) {
            drawableObject.drawSelf(g2d);
        }
        
        //Start Painting things!
        if (myCurrentObject != null) {
            myCurrentObject.drawSelf(g2d);
        }
        
        //call to draw grid
        if (myGridEnabled) {
            drawGrid(g2d);
        }
        
    }
    
  
    
    private class PaintListener extends MouseInputAdapter {
        
        /**
         * just a mouseEvent. 
         * @see java.awt.event.MouseAdapter#mousePressed(java.awt.event.MouseEvent)
         */
        public void mousePressed(final MouseEvent theMouseEvent) {
            myCurrentObject = new shapes.Rectangle(theMouseEvent.getX(), theMouseEvent.getY(),
                                              myCurrentColor, myCurrentThickness);
        }
        
        /* (non-Javadoc)
         * @see java.awt.event.MouseAdapter#mouseDragged(java.awt.event.MouseEvent)
         */
        public void mouseDragged(final MouseEvent theMouseEvent) {
            myCurrentObject.update(theMouseEvent.getX(), theMouseEvent.getY());
            repaint();
        }
        
        /* (non-Javadoc)
         * @see java.awt.event.MouseAdapter#mouseReleased(java.awt.event.MouseEvent)
         */
        public void mouseReleased(final MouseEvent theMouseEvent) {
            myCurrentObject.update(theMouseEvent.getX(), theMouseEvent.getY());
            myThingsToDraw.add(myCurrentObject);
            myCurrentObject = nullDrawable(); //when we end
            repaint();
            
        }
        
        /**
         * Returns a null Drawable to represent a clear state.
         * @return Always null.
         */
        private DrawableShape nullDrawable() {
            return null;
        }
        
    }
    
    /**
     * clear my drawings.
     */
    public void clearMyDrawings() {
        myThingsToDraw.clear();
        repaint();
    }

        
}
