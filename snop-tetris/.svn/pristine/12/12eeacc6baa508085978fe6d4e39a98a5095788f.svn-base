/*
 * TCSS 305 – Autumn 2015 
 * Assignment 6a – tetris
 */

package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.Rectangle2D;

import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;

/**
 * @author Sophie
 * @version 29 November 2015
 */
public class ScorePanel extends JPanel {

    /**
     * Generated.
     */
    private static final long serialVersionUID = -7406471157310394433L;

    /** Font size for text in this panel. */
    private static final int FONT_SIZE = 18;

    /** Lines to clear per level. */
    private static final int LINES_PER_LEVEL = 10;

    /** Points awarded per line cleared. */
    private static final int POINTS_PER_LINE = 10;

    /** String array containing the info for this panel. */
    private static final String[] SCORE_INFO =
    {"SCOREBOARD", "", "", "Score: ", "Level: ", "Lines to clear: "};

    /** Lines to be cleared simultaneously for score bonus. */
    private static final int TETRIS = 5;

    /** Speed change of timer per level in milliseconds. */
    private static final int DELAY_CHANGE = 100;

    /** Points awarded each level up. */
    private static final int LEVEL_BONUS = 100;

    /** Instance of Board which this panel represents. */
    private final Board myBoard;

    /** Instance of Timer controlling speed of game this panel represents. */
    private final Timer myTimer;

    /** Current speed of myTimer, in milliseconds. */
    private final int myTimerSpeed;

    /** Current score of current game. */
    private int myScore;

    /** Current level of current game. */
    private int myLevel;

    /** Total number of lines cleared. */
    private int myLines;

    /** Number of lines with at least one frozen block on the Board. */
    private int myBoardSize;

    /**
     * Constructor for TetrisPanel.
     * 
     * @param theBoard Board object representing current game.
     * @param theTimer Timer object for current game.
     * @param theTimerSpeed Initial speed of theTimer.
     */
    public ScorePanel(final Board theBoard, final Timer theTimer, final int theTimerSpeed) {
        super();
        myBoard = theBoard;
        myTimer = theTimer;
        myTimerSpeed = theTimerSpeed;
        myScore = 0;
        myLevel = 1;
        myLines = 0;
        myBoardSize = 0;
    }

    @Override
    public void paintComponent(final Graphics theGraphics) {
        checkState();

        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);

        final Font font = new Font(Font.DIALOG,
                                   Font.LAYOUT_NO_START_CONTEXT + Font.HANGING_BASELINE,
                                   FONT_SIZE);
        g2d.setFont(font);
        g2d.setColor(Color.DARK_GRAY);
        for (int i = 0; i <= 2; i++) {
            final FontRenderContext renderContext = g2d.getFontRenderContext();
            final GlyphVector glyphVector =
                            font.createGlyphVector(renderContext, SCORE_INFO[i]);
            final Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();

            final int x = (int) ((getWidth() - visualBounds.getWidth()) / 2
                            - visualBounds.getX());

            g2d.drawString(SCORE_INFO[i], x, (i + 1) * FONT_SIZE);
        }

        int i = 2 + 1;
        final FontRenderContext renderContext = g2d.getFontRenderContext();
        GlyphVector glyphVector =
                        font.createGlyphVector(renderContext, SCORE_INFO[i] + myScore);
        Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();

        int x = (int) ((getWidth() - visualBounds.getWidth()) / 2 - visualBounds.getX());

        g2d.drawString(SCORE_INFO[i] + myScore, x, (i++ + 1) * FONT_SIZE);

        glyphVector = font.createGlyphVector(renderContext, SCORE_INFO[i] + myLevel);
        visualBounds = glyphVector.getVisualBounds().getBounds();

        x = (int) ((getWidth() - visualBounds.getWidth()) / 2 - visualBounds.getX());

        g2d.drawString(SCORE_INFO[i] + myLevel, x, (i++ + 1) * FONT_SIZE);

        final int toClear = LINES_PER_LEVEL - (myLines % LINES_PER_LEVEL);
        glyphVector = font.createGlyphVector(renderContext, SCORE_INFO[i] + toClear);
        visualBounds = glyphVector.getVisualBounds().getBounds();

        x = (int) ((getWidth() - visualBounds.getWidth()) / 2 - visualBounds.getX());

        g2d.drawString(SCORE_INFO[i] + toClear, x, (i++ + 1) * FONT_SIZE);
    }

    /**
     * Checks the current state of the board, awarding points and incrementing
     * level as necessary.
     */
    private void checkState() {
        final int newBoardSize = myBoard.getFrozenBlocks().size();
        if (newBoardSize > myBoardSize) {
            myBoardSize = newBoardSize;
        } else {
            final int cleared = myBoardSize - newBoardSize;
            myScore += cleared * POINTS_PER_LINE;
            if (cleared == TETRIS) {
                myScore += POINTS_PER_LINE;
            }
            myLines += cleared;
            if ((myLines / LINES_PER_LEVEL) + 1 > myLevel) {
                myLevel++;
                myTimer.setDelay(myTimerSpeed - DELAY_CHANGE);
                myScore += LEVEL_BONUS;
            }

            myBoardSize = newBoardSize;
        }
    }

    /** Resets this panel when a new game is started. */
    public void reset() {
        myLevel = 1;
        myLines = 0;
        myScore = 0;
        myBoardSize = 0;
    }
}
